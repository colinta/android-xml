module AndroidXml
  module_function

  def file(filename, &block)
    XmlFile.new(filename, &block)
  end

  def files
    @files ||= []
  end

  def generated
    @generated ||= []
  end

  def write_all(opts={})
    clean_up = opts.fetch(:clean_up, false)

    AndroidXml.files.each do |xml_file|
      generated << File.absolute_path(xml_file.filename)
      xml_file.write
    end

    @files = nil
  end

  def output_all
    AndroidXml.files.each do |xml_file|
      xml_file.out
      puts
    end
  end

  def clean_up(locations)
    locations = [locations] unless locations.is_a?(Array)

    locations.each do |location|

      Dir.glob(File.join(location, '**/*.xml')).each do |filename|
        abs_path = File.absolute_path(filename)
        unless generated.include?(abs_path)
          if File.new(abs_path).read =~ /generated by AndroidXml/
            warn "\033[31m␡\033[0m #{filename}"
            File.delete(abs_path)
          end
        end
      end
    end
  end

  def setup(&block)
    Setup.setup(&block)
  end

  def reset
    Setup.reset
    @files = nil
    @generated = nil
  end

  def tag(tag_name, attrs=nil, &block)
    attrs ||= {}
    Tag.new(tag_name, attrs, &block)
  end

  # create a file or a new tag.
  def method_missing(method_name, filename_or_attrs=nil, &block)
    if filename_or_attrs.is_a?(String) || filename_or_attrs.is_a?(Symbol)
      xml_file = file(filename_or_attrs) do
        send(method_name, &block)
      end
      xml_file
    else
      tag(method_name, filename_or_attrs, &block)
    end
  end

end
